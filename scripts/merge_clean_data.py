import pandas as pd
import numpy as np
import sklearn as skl
from sklearn import preprocessing
import matplotlib.pyplot as plt

PRINTING = 0
if PRINTING:
    print('Creating merged dataset...')

##########################
# County Health Rankings #
##########################

if PRINTING:
    print('Merging County Health Rankings...')

# Load Ranked Measure Data
cols_1 = [0, 1, 2, 3, 4, 23, 27, 31, 36, 55, 59, 63, 65, 69, 71, 77, 82, 84, 104, 109, 113, 127, 134, 142, 146, 152, 154, 165, 169, 174, 177, 180, 199, 201, 203, 216, 236]
c1_data = pd.read_excel('../data/2020_CHRD.xlsx', sheet_name='Ranked Measure Data', header=1, usecols=cols_1)
c1_data = c1_data.drop(columns='% Uninsured')

# Load Additional Measure Data
cols_2 = [0, 3, 22, 41, 60, 787, 81, 84, 88, 90, 92, 94, 113, 131, 135, 139, 143, 144, 147, 152, 157, 175,
          176, 177, 178, 197, 217, 238, 241, 245, 248, 249, 250, 252, 254, 256, 258, 260, 262, 264, 267, 269]
c2_data = pd.read_excel('../data/2020_CHRD.xlsx', sheet_name='Additional Measure Data', header=1, usecols=cols_2)

# Clean
c2_data = c2_data.rename(columns={'% Uninsured.1': '% Children Uninsured', 'Segregation index':
                                  'Black/White Segregation Index', 'Segregation Index':
                                  'non-White/White Segregation Index', 'Average Grade Performance':
                                  'Average Reading Performance', 'Average Grade Performance.1': 'Average Math Performance',
                                  })

# Merge c1 and c2
merged_data = pd.merge(c1_data, c2_data, on='FIPS')


#################
# Internet Data #
#################
# Note: Some counties with low numbers have -9999 to 'preserve confidentiality' so we need to interpolate
# Note: Some counties have a ratio above one, presumably because some houses have multiple connections

if PRINTING:
    print('Merging internet_percent...')

# Load
internet_data = pd.read_excel('../data/internet_data.xlsx', sheet_name='County Connections Dec 2017', usecols=[0, 3, 4, 5, 6, 7])

# Clean
internet_data = internet_data.replace(-9999, np.nan)  # Fill in missing data with mean value
i_mean = internet_data['ratio'].mean()
internet_data = internet_data.fillna(0.698)

# Merge
merged_data = pd.merge(merged_data, internet_data, left_on='FIPS', right_on='countycode')


#####################
# COVID County Data #
#####################

if PRINTING:
    print('Merging COVID data...')

# Load
covid_data = pd.read_csv('../../nyt_data/us-counties.csv')

# Clean
last_day = covid_data['date'].iloc[-1]
covid_data = covid_data.loc[covid_data.date == last_day]
covid_data['fips'] = covid_data['fips'].fillna(0).astype(int)
covid_data['fips'] = covid_data['fips'].astype(int)


############
# NYC Data #
############

if PRINTING:
    print('Merging NYC COVID data...')

# Load
nyc_data = pd.read_csv('../../coronavirus-data/by-boro.csv')

# Clean
fips = [36005, 36047, 36061, 36081, 36085, 0]
state = ['New York', 'New York', ' New York', 'New York', 'New York', 'New York']
nyc_data['fips'] = fips
nyc_data['state'] = state

nyc_data = nyc_data.rename(columns={'CASE_COUNT': 'cases', 'DEATH_COUNT': 'deaths'})

# Merge covid_data and nyc_data
covid_data = covid_data.merge(nyc_data, how='outer')

# Clean
covid_ny = covid_data.loc[covid_data['state'] == 'New York']
covid_ny = covid_ny.drop(['BOROUGH_GROUP', 'CASE_RATE', 'HOSPITALIZED_RATE', 'DEATH_RATE', 'HOSPITALIZED_COUNT'], axis=1)

covid_data = covid_data.drop(['BOROUGH_GROUP', 'CASE_RATE', 'HOSPITALIZED_RATE', 'DEATH_RATE', 'HOSPITALIZED_COUNT'], axis=1)

# Merge
merged_data = pd.merge(merged_data, covid_data, left_on='FIPS', right_on='fips')


############
# Cleaning #
############

if PRINTING:
    print('Cleaning data...')

# Clean
merged_data = merged_data.rename(columns={'consumer': 'internet_consumer', 'non_consumer': 'internet_nonconsumer', 'all': 'internet_all',
                                          'hhs': 'internet_hhs', 'ratio': 'internet_ratio', 'cases': 'covid_cases', 'deaths': 'covid_deaths'})
merged_data = merged_data.drop(columns=['date', 'county', 'state', 'fips'])

merged_data = merged_data.fillna(0)  # Change NaNs to 0

merged_data['internet_percent'] = 100 * merged_data.internet_ratio
merged_data['FIPS'] = merged_data['FIPS'].astype(str)

merged_data.loc[(merged_data.State == 'Arizona'), 'FIPS'] = '0' + merged_data.loc[(merged_data.State == 'Arizona'), 'FIPS']  # Add the 0s back in to the fips code for first 9 states alphabetically
merged_data.loc[(merged_data.State == 'Alabama'), 'FIPS'] = '0' + merged_data.loc[(merged_data.State == 'Alabama'), 'FIPS']
merged_data.loc[(merged_data.State == 'Alaska'), 'FIPS'] = '0' + merged_data.loc[(merged_data.State == 'Alaska'), 'FIPS']
merged_data.loc[(merged_data.State == 'Arkansas'), 'FIPS'] = '0' + merged_data.loc[(merged_data.State == 'Arkansas'), 'FIPS']
merged_data.loc[(merged_data.State == 'California'), 'FIPS'] = '0' + merged_data.loc[(merged_data.State == 'California'), 'FIPS']
merged_data.loc[(merged_data.State == 'Colorado'), 'FIPS'] = '0' + merged_data.loc[(merged_data.State == 'Colorado'), 'FIPS']
merged_data.loc[(merged_data.State == 'Connecticut'), 'FIPS'] = '0' + merged_data.loc[(merged_data.State == 'Connecticut'), 'FIPS']


################
# Obesity Data #
################

if PRINTING:
    print('Merging % Adults with Obesity...')

# Load
obesity_data = pd.read_csv('../data/DiabetesAtlasCountyData.csv', skiprows=2, usecols=['County', 'State', 'CountyFIPS', 'Percentage'])

# Clean
obesity_data['CountyFIPS'] = obesity_data['CountyFIPS'].fillna(0).astype(int)
obesity_data['CountyFIPS'] = obesity_data['CountyFIPS'].astype(str)

obesity_data.loc[(obesity_data.State == 'Arizona'), 'CountyFIPS'] = '0' + obesity_data.loc[(obesity_data.State == 'Arizona'),
                                                                                           'CountyFIPS']  # Add the 0s back in to the fips code for first 9 states alphabetically
obesity_data.loc[(obesity_data.State == 'Alabama'), 'CountyFIPS'] = '0' + obesity_data.loc[(obesity_data.State == 'Alabama'), 'CountyFIPS']
obesity_data.loc[(obesity_data.State == 'Alaska'), 'CountyFIPS'] = '0' + obesity_data.loc[(obesity_data.State == 'Alaska'), 'CountyFIPS']
obesity_data.loc[(obesity_data.State == 'Arkansas'), 'CountyFIPS'] = '0' + obesity_data.loc[(obesity_data.State == 'Arkansas'), 'CountyFIPS']
obesity_data.loc[(obesity_data.State == 'California'), 'CountyFIPS'] = '0' + obesity_data.loc[(obesity_data.State == 'California'), 'CountyFIPS']
obesity_data.loc[(obesity_data.State == 'Colorado'), 'CountyFIPS'] = '0' + obesity_data.loc[(obesity_data.State == 'Colorado'), 'CountyFIPS']
obesity_data.loc[(obesity_data.State == 'Connecticut'), 'CountyFIPS'] = '0' + obesity_data.loc[(obesity_data.State == 'Connecticut'), 'CountyFIPS']

# Merge
merged_data = pd.merge(merged_data, obesity_data, left_on='FIPS', right_on='CountyFIPS')

# Clean
merged_data = merged_data.rename(columns={'Percentage': '%  Adults with Obesity', 'State_x': 'State', 'County_x': 'County'})
merged_data = merged_data.drop(columns=['% Adults with Obesity', 'County_y', 'State_y', 'CountyFIPS'])


######################
# Heart Disease Data #
######################

if PRINTING:
    print('Merging Heart Disease Death Rate...')

# Load
heart_disease = pd.read_csv('../data/all_heart.csv', usecols=['cnty_fips', 'Value', 'display_name'])

# Clean
heart_disease_split = heart_disease.display_name.str.split(", ", expand=True)
heart_disease_split.columns = ['county', 'state']
heart_disease = pd.concat([heart_disease.drop("display_name", axis=1), heart_disease_split], axis=1)

heart_disease.state = heart_disease.state.str.replace('[",(,)]', '')
heart_disease.county = heart_disease.county.str.replace('[",(,)]', '')
heart_disease['cnty_fips'] = heart_disease['cnty_fips'].astype(str)

heart_disease.loc[(heart_disease.state == 'AZ'), 'cnty_fips'] = '0' + heart_disease.loc[(heart_disease.state == 'AZ'), 'cnty_fips']  # Add the 0s back in
heart_disease.loc[(heart_disease.state == 'AL'), 'cnty_fips'] = '0' + heart_disease.loc[(heart_disease.state == 'AL'), 'cnty_fips']
heart_disease.loc[(heart_disease.state == 'AK'), 'cnty_fips'] = '0' + heart_disease.loc[(heart_disease.state == 'AK'), 'cnty_fips']
heart_disease.loc[(heart_disease.state == 'AR'), 'cnty_fips'] = '0' + heart_disease.loc[(heart_disease.state == 'AR'), 'cnty_fips']
heart_disease.loc[(heart_disease.state == 'CA'), 'cnty_fips'] = '0' + heart_disease.loc[(heart_disease.state == 'CA'), 'cnty_fips']
heart_disease.loc[(heart_disease.state == 'CO'), 'cnty_fips'] = '0' + heart_disease.loc[(heart_disease.state == 'CO'), 'cnty_fips']
heart_disease.loc[(heart_disease.state == 'CT'), 'cnty_fips'] = '0' + heart_disease.loc[(heart_disease.state == 'CT'), 'cnty_fips']

# Merge
merged_data = pd.merge(merged_data, heart_disease, left_on='FIPS', right_on='cnty_fips')

# Clean
merged_data = merged_data.rename(columns={'Value': 'Heart Disease Death Rate'})
merged_data = merged_data.drop(columns=['cnty_fips', 'county', 'state'])


################
# Hypertension #
################

if PRINTING:
    print('Merging Hypertension Death Rate...')

# Load
hypertension = pd.read_csv('../data/hypertension.csv', usecols=['cnty_fips', 'Value', 'display_name'])

# Clean
hypertension_split = hypertension.display_name.str.split(", ", expand=True)
hypertension_split.columns = ['county', 'state']
hypertension = pd.concat([hypertension.drop("display_name", axis=1), hypertension_split], axis=1)

hypertension.state = hypertension.state.str.replace('[",(,)]', '')
hypertension.county = hypertension.county.str.replace('[",(,)]', '')
hypertension['cnty_fips'] = hypertension['cnty_fips'].astype(str)

hypertension.loc[(hypertension.state == 'AL'), 'cnty_fips'] = '0' + hypertension.loc[(hypertension.state == 'AL'), 'cnty_fips']  # Add 0s back in
hypertension.loc[(hypertension.state == 'AK'), 'cnty_fips'] = '0' + hypertension.loc[(hypertension.state == 'AK'), 'cnty_fips']
hypertension.loc[(hypertension.state == 'AZ'), 'cnty_fips'] = '0' + hypertension.loc[(hypertension.state == 'AZ'), 'cnty_fips']
hypertension.loc[(hypertension.state == 'AR'), 'cnty_fips'] = '0' + hypertension.loc[(hypertension.state == 'AR'), 'cnty_fips']
hypertension.loc[(hypertension.state == 'CA'), 'cnty_fips'] = '0' + hypertension.loc[(hypertension.state == 'CA'), 'cnty_fips']
hypertension.loc[(hypertension.state == 'CO'), 'cnty_fips'] = '0' + hypertension.loc[(hypertension.state == 'CO'), 'cnty_fips']
hypertension.loc[(hypertension.state == 'CT'), 'cnty_fips'] = '0' + hypertension.loc[(hypertension.state == 'CT'), 'cnty_fips']

# Merge
merged_data = pd.merge(merged_data, hypertension, left_on='FIPS', right_on='cnty_fips')

# Clean
merged_data = merged_data.rename(columns={'Value': 'Hypertension Death Rate'})
merged_data = merged_data.drop(columns=['cnty_fips', 'county', 'state'])


#############
# Load FIPS #
#############

FIPS_codes = pd.read_csv('../data/FIPS.csv', usecols=['FIPS', 'County', 'State', 'Merge'])
FIPS_codes = FIPS_codes.rename(columns={'FIPS': 'FIPS_'})


###########
# Elderly #
###########

if PRINTING:
    print('Merging % Adults 65 and Older...')

# Load
pop_elderly = pd.read_csv('../data/elderly_agesex.csv', usecols=['CTYNAME', 'STNAME', 'POPESTIMATE', 'AGE65PLUS_TOT', 'Merge'])

# Clean
pop_elderly = pd.merge(pop_elderly, FIPS_codes, left_on='Merge', right_on='Merge')  # Merge with FIPS

pop_elderly = pop_elderly.drop(columns=['County', 'Merge', 'State'])
pop_elderly = pop_elderly.rename(columns={'CTYNAME': 'County_', 'STNAME': 'State_'})
pop_elderly['FIPS_'] = pop_elderly['FIPS_'].astype(str)

pop_elderly.loc[(pop_elderly.State_ == 'Arizona'), 'FIPS_'] = '0' + pop_elderly.loc[(pop_elderly.State_ == 'Arizona'), 'FIPS_']
pop_elderly.loc[(pop_elderly.State_ == 'Alabama'), 'FIPS_'] = '0' + pop_elderly.loc[(pop_elderly.State_ == 'Alabama'), 'FIPS_']
pop_elderly.loc[(pop_elderly.State_ == 'Alaska'), 'FIPS_'] = '0' + pop_elderly.loc[(pop_elderly.State_ == 'Alaska'), 'FIPS_']
pop_elderly.loc[(pop_elderly.State_ == 'Arkansas'), 'FIPS_'] = '0' + pop_elderly.loc[(pop_elderly.State_ == 'Arkansas'), 'FIPS_']
pop_elderly.loc[(pop_elderly.State_ == 'California'), 'FIPS_'] = '0' + pop_elderly.loc[(pop_elderly.State_ == 'California'), 'FIPS_']
pop_elderly.loc[(pop_elderly.State_ == 'Colorado'), 'FIPS_'] = '0' + pop_elderly.loc[(pop_elderly.State_ == 'Colorado'), 'FIPS_']
pop_elderly.loc[(pop_elderly.State_ == 'Connecticut'), 'FIPS_'] = '0' + pop_elderly.loc[(pop_elderly.State_ == 'Connecticut'), 'FIPS_']

pop_elderly['POPESTIMATE'] = pop_elderly['POPESTIMATE'].astype(float)
pop_elderly['AGE65PLUS_TOT'] = pop_elderly['AGE65PLUS_TOT'].astype(float)
pop_elderly['% Adults 65 and Older'] = (100 * pop_elderly['AGE65PLUS_TOT'] / pop_elderly['POPESTIMATE']).round(decimals=3)

# Merge
merged_data = pd.merge(merged_data, pop_elderly, left_on='FIPS', right_on='FIPS_')

# Clean
merged_data = merged_data.drop(columns=['FIPS_', 'State_', 'County_', 'POPESTIMATE', 'AGE65PLUS_TOT', '% 65 and over'])


#############
# Mortality #
#############

if PRINTING:
    print('Merging COPD Mortality Rate...')

# Load
copd_mortality = pd.read_csv('../data/IHME_USA_COUNTY.csv', usecols=['Location', 'State', 'FIPS', 'Mortality Rate, 2014*'])

# Clean
copd_mortality = copd_mortality.fillna(0)
copd_mortality = copd_mortality.rename(columns={'Mortality Rate, 2014*': 'Mortality'})
copd_mortality['FIPS'] = copd_mortality['FIPS'].astype(str)

copd_mortality.loc[(copd_mortality.State == 'Arizona'), 'FIPS'] = '0' + copd_mortality.loc[(copd_mortality.State == 'Arizona'), 'FIPS']
copd_mortality.loc[(copd_mortality.State == 'Alabama'), 'FIPS'] = '0' + copd_mortality.loc[(copd_mortality.State == 'Alabama'), 'FIPS']
copd_mortality.loc[(copd_mortality.State == 'Alaska'), 'FIPS'] = '0' + copd_mortality.loc[(copd_mortality.State == 'Alaska'), 'FIPS']
copd_mortality.loc[(copd_mortality.State == 'Arkansas'), 'FIPS'] = '0' + copd_mortality.loc[(copd_mortality.State == 'Arkansas'), 'FIPS']
copd_mortality.loc[(copd_mortality.State == 'California'), 'FIPS'] = '0' + copd_mortality.loc[(copd_mortality.State == 'California'), 'FIPS']
copd_mortality.loc[(copd_mortality.State == 'Colorado'), 'FIPS'] = '0' + copd_mortality.loc[(copd_mortality.State == 'Colorado'), 'FIPS']
copd_mortality.loc[(copd_mortality.State == 'Connecticut'), 'FIPS'] = '0' + copd_mortality.loc[(copd_mortality.State == 'Connecticut'), 'FIPS']

# Merge
merged_data = pd.merge(merged_data, copd_mortality, left_on='FIPS', right_on='FIPS')

# Clean
merged_data = merged_data.drop(columns=['Location', 'State_y'])
merged_data = merged_data.rename(columns={'State_x': 'State', 'Mortality': 'COPD Mortality Rate'})


############
# Diabetes #
############

if PRINTING:
    print('Merging % Diagnosed Diabetes...')

# Load
diagnosed_diabetes = pd.read_csv('../data/2017_Diabetes_Diagnosed.csv', skiprows=2, usecols=['County', 'State', 'CountyFIPS', 'Percentage'])

# Clean
diagnosed_diabetes['CountyFIPS'] = diagnosed_diabetes['CountyFIPS'].fillna(0).astype(int)
diagnosed_diabetes['CountyFIPS'] = diagnosed_diabetes['CountyFIPS'].astype(str)

diagnosed_diabetes.loc[(diagnosed_diabetes.State == 'Arizona'), 'CountyFIPS'] = '0' + diagnosed_diabetes.loc[(diagnosed_diabetes.State == 'Arizona'), 'CountyFIPS']
diagnosed_diabetes.loc[(diagnosed_diabetes.State == 'Alabama'), 'CountyFIPS'] = '0' + diagnosed_diabetes.loc[(diagnosed_diabetes.State == 'Alabama'), 'CountyFIPS']
diagnosed_diabetes.loc[(diagnosed_diabetes.State == 'Alaska'), 'CountyFIPS'] = '0' + diagnosed_diabetes.loc[(diagnosed_diabetes.State == 'Alaska'), 'CountyFIPS']
diagnosed_diabetes.loc[(diagnosed_diabetes.State == 'Arkansas'), 'CountyFIPS'] = '0' + diagnosed_diabetes.loc[(diagnosed_diabetes.State == 'Arkansas'), 'CountyFIPS']
diagnosed_diabetes.loc[(diagnosed_diabetes.State == 'California'), 'CountyFIPS'] = '0' + diagnosed_diabetes.loc[(diagnosed_diabetes.State == 'California'), 'CountyFIPS']
diagnosed_diabetes.loc[(diagnosed_diabetes.State == 'Colorado'), 'CountyFIPS'] = '0' + diagnosed_diabetes.loc[(diagnosed_diabetes.State == 'Colorado'), 'CountyFIPS']
diagnosed_diabetes.loc[(diagnosed_diabetes.State == 'Connecticut'), 'CountyFIPS'] = '0' + diagnosed_diabetes.loc[(diagnosed_diabetes.State == 'Connecticut'), 'CountyFIPS']

# Merge
merged_data = pd.merge(merged_data, diagnosed_diabetes, left_on='FIPS', right_on='CountyFIPS')

# Clean
merged_data = merged_data.rename(columns={'State_x': 'State', 'County_x': 'County', 'Percentage': '% Diagnosed Diabetes'})
merged_data = merged_data.drop(columns=['% Adults with Diabetes', 'County_y', 'State_y', 'CountyFIPS'])


########
# Race #
########

if PRINTING:
    print('Merging % Nonwhite...')

# Load
race_acs = pd.read_csv("../data/ACSDT5Y2018.B02001_data_with_overlays_2020-10-01T103850.csv", usecols=["GEO_ID", "B02001_001E", "B02001_002E"])

# Clean
race_acs = race_acs.loc[1:race_acs.shape[0]]

race_acs.rename(columns={"GEO_ID": "FIPS", "B02001_001E": "Total", "B02001_002E": "White_Alone"}, inplace=True)

race_acs["FIPS"] = race_acs["FIPS"].apply(lambda x: x[9:14])
race_acs = race_acs.loc[race_acs["FIPS"] != ""]

race_acs["Total"] = race_acs["Total"].astype(int)
race_acs["White_Alone"] = race_acs["White_Alone"].astype(int)

race_acs["Nonwhite"] = race_acs["Total"] - race_acs["White_Alone"]
race_acs["% Nonwhite"] = 100 * (race_acs["Nonwhite"] / race_acs["Total"])
race_acs = race_acs[["FIPS", "% Nonwhite"]]

# Merge
merged_data = pd.merge(merged_data, race_acs, left_on='FIPS', right_on='FIPS')


########
# Cars #
########

if PRINTING:
    print('Merging % households wo car...')

# Load
hh_wo_car = pd.read_csv('../data/householdwoutcar_with_fips.csv', usecols=['fips', 'COUNTY_NAME', 'STATE_NAME', 'Number_Households_Wout_Car'],  dtype={'fips': str})

# Clean
hh_wo_car.loc[(hh_wo_car.STATE_NAME == 'Arizona'), 'fips'] = '0' + hh_wo_car.loc[(hh_wo_car.STATE_NAME == 'Arizona'), 'fips']
hh_wo_car.loc[(hh_wo_car.STATE_NAME == 'Alabama'), 'fips'] = '0' + hh_wo_car.loc[(hh_wo_car.STATE_NAME == 'Alabama'), 'fips']
hh_wo_car.loc[(hh_wo_car.STATE_NAME == 'Alaska'), 'fips'] = '0' + hh_wo_car.loc[(hh_wo_car.STATE_NAME == 'Alaska'), 'fips']
hh_wo_car.loc[(hh_wo_car.STATE_NAME == 'Arkansas'), 'fips'] = '0' + hh_wo_car.loc[(hh_wo_car.STATE_NAME == 'Arkansas'), 'fips']
hh_wo_car.loc[(hh_wo_car.STATE_NAME == 'California'), 'fips'] = '0' + hh_wo_car.loc[(hh_wo_car.STATE_NAME == 'California'), 'fips']
hh_wo_car.loc[(hh_wo_car.STATE_NAME == 'Colorado'), 'fips'] = '0' + hh_wo_car.loc[(hh_wo_car.STATE_NAME == 'Colorado'), 'fips']
hh_wo_car.loc[(hh_wo_car.STATE_NAME == 'Connecticut'), 'fips'] = '0' + hh_wo_car.loc[(hh_wo_car.STATE_NAME == 'Connecticut'), 'fips']

# Merge
merged_data = pd.merge(merged_data, hh_wo_car, left_on=['FIPS'], right_on=['fips'])

# Clean
merged_data = merged_data.rename(columns={'Number_Households_Wout_Car': 'hh_wo_car'})
merged_data = merged_data.drop(['fips', 'COUNTY_NAME', 'STATE_NAME'], axis=1)

merged_data['% households wo car'] = merged_data['hh_wo_car'] / (merged_data['internet_hhs'] * 1000)
merged_data = merged_data.drop('hh_wo_car', axis=1)


#############
# Hospitals #
#############

if PRINTING:
    print('Merging Number of Hospitals...')

# Load
hospitals = pd.read_csv('../data/Hospitals.csv', usecols=['ID', 'STATE', 'COUNTYFIPS'])

# Clean
hospitals_grouped = hospitals.groupby(['STATE', 'COUNTYFIPS'], as_index=False).count().rename(columns={'ID': 'Number of Hospitals'})

# Merge
merged_data = pd.merge(merged_data, hospitals_grouped, left_on='FIPS', right_on='COUNTYFIPS', how='left')  # Note: using how=left to account for missing values (counties with no hospitals)

# Clean
merged_data = merged_data.drop(['STATE', 'COUNTYFIPS'], axis=1)
merged_data['Number of Hospitals'] = merged_data['Number of Hospitals'].fillna(0)  # Fill in the null hospital rows with 0


##############
# Disability #
##############

if PRINTING:
    print('Merging % disabled...')

# Load
col_name = 'Estimate!!Percent with a disability!!Subject!!Total civilian noninstitutionalized population'
disability = pd.read_csv('../data/disability_data.csv', skiprows=1, usecols=['id', 'Geographic Area Name', col_name])

# Clean
disability = disability.rename(columns={col_name: '% disabled', 'Geographic Area Name': 'Location'})

fips = []  # Add the fips codes
for county_id in disability['id']:
    fips_i = county_id[-5:]
    fips.append(fips_i)

disability['FIPS'] = fips

# Merge
merged_data = pd.merge(merged_data, disability, left_on=['FIPS'], right_on=['FIPS'])

# Clean
merged_data = merged_data.drop(['id', 'Location'], axis=1)


####################
# Health Insurance #
####################

if PRINTING:
    print('Merging % Without Health Insurance...')

# Load
health_insr = pd.read_csv("../data/sahie_2018.csv", low_memory=False)  # low_memory=False or specify column dtypes

# Clean
health_insr["FIPS"] = health_insr["statefips"].astype(str).apply(lambda x: x if len(x) > 1 else "0" * (2 - len(str(x))) + str(x) ) + \
    health_insr["countyfips"].astype(str).apply(lambda x: x if len(str(x)) > 2 else "0" * (3 - len(str(x))) + str(x))

health_insr_subset = health_insr.loc[(health_insr["agecat"] == 0) &
                                     (health_insr["racecat"] == 0) &
                                     (health_insr["sexcat"] == 0) &
                                     (health_insr["iprcat"] == 0) &
                                     (health_insr["countyfips"] != 0)]

health_insr_subset = health_insr_subset[["FIPS", "PCTUI"]]
health_insr_subset["PCTUI"] = health_insr_subset["PCTUI"].apply(pd.to_numeric, errors="coerce")
health_insr_subset = health_insr_subset.loc[health_insr_subset["PCTUI"].isnull() == False]
health_insr_subset.rename(columns={"PCTUI": "% Without Health Insurance"}, inplace=True)

# Merge
merged_data = pd.merge(merged_data, health_insr_subset, left_on='FIPS', right_on='FIPS')


###################
# Limited English #
###################

if PRINTING:
    print('Merging % Limited English Proficiency...')

# Load
limited_eng = pd.read_csv("../data/ACSST5Y2018.S1602_data_with_overlays.csv", usecols=["GEO_ID", "S1602_C01_001E", "S1602_C03_001E"])
limited_eng = limited_eng.loc[1:limited_eng.shape[0]]

# Clean
limited_eng.rename(columns={"GEO_ID": "FIPS", "S1602_C01_001E": "Total_Households", "S1602_C03_001E": "Number_Limited_English_Speaking"}, inplace=True)

limited_eng["FIPS"] = limited_eng["FIPS"].apply(lambda x: x[9:14])
limited_eng = limited_eng.loc[limited_eng["FIPS"] != ""]

limited_eng["Total_Households"] = limited_eng["Total_Households"].astype(int)
limited_eng["Number_Limited_English_Speaking"] = limited_eng["Number_Limited_English_Speaking"].astype(int)
limited_eng["% Limited English Proficiency"] = 100 * (limited_eng["Number_Limited_English_Speaking"] / limited_eng["Total_Households"])

limited_eng = limited_eng[["FIPS", "% Limited English Proficiency"]]

# Merge
merged_data = pd.merge(merged_data, limited_eng, left_on='FIPS', right_on='FIPS')
merged_data["% Limited English Proficiency"].isnull().sum() / merged_data.shape[0]  # Reviewing the percent of missing data in the merged column


##################
# Public Transit #
##################

if PRINTING:
    print('Merging % workers commuting by public transit...')

# Load
public_transit = pd.read_csv('../data/ACS_S0801_Commute.csv', low_memory=False, usecols=['State', 'County', 'Merge',
                                                                                         'Estimate!!Total!!Workers 16 years and over!!MEANS OF TRANSPORTATION TO WORK!!Public transportation (excluding taxicab)'])

# Clean
public_transit = pd.merge(public_transit, FIPS_codes, left_on='Merge', right_on='Merge')

public_transit = public_transit.drop(columns=['County_y', 'Merge', 'State_y'])
public_transit = public_transit.rename(columns={'County_x': 'County', 'State_x': 'State',
                                                'Estimate!!Total!!Workers 16 years and over!!MEANS OF TRANSPORTATION TO WORK!!Public transportation (excluding taxicab)': '% workers commuting by public transit'})
public_transit['FIPS_'] = public_transit['FIPS_'].astype(str)

public_transit.loc[(public_transit.State == 'Arizona'), 'FIPS_'] = '0' + public_transit.loc[(public_transit.State == 'Arizona'), 'FIPS_']
public_transit.loc[(public_transit.State == 'Alabama'), 'FIPS_'] = '0' + public_transit.loc[(public_transit.State == 'Alabama'), 'FIPS_']
public_transit.loc[(public_transit.State == 'Alaska'), 'FIPS_'] = '0' + public_transit.loc[(public_transit.State == 'Alaska'), 'FIPS_']
public_transit.loc[(public_transit.State == 'Arkansas'), 'FIPS_'] = '0' + public_transit.loc[(public_transit.State == 'Arkansas'), 'FIPS_']
public_transit.loc[(public_transit.State == 'California'), 'FIPS_'] = '0' + public_transit.loc[(public_transit.State == 'California'), 'FIPS_']
public_transit.loc[(public_transit.State == 'Colorado'), 'FIPS_'] = '0' + public_transit.loc[(public_transit.State == 'Colorado'), 'FIPS_']
public_transit.loc[(public_transit.State == 'Connecticut'), 'FIPS_'] = '0' + public_transit.loc[(public_transit.State == 'Connecticut'), 'FIPS_']

# Merge
merged_data = pd.merge(merged_data, public_transit, left_on='FIPS', right_on='FIPS_')

# Clean
merged_data = merged_data.drop(columns=['County_y', 'FIPS_', 'State_y'])
merged_data = merged_data.rename(columns={'County_x': 'County', 'State_x': 'State'})


########
# Vets #
########

if PRINTING:
    print('Merging % Veterans in Civilian Adult Population...')

# Load
est_vets_percent = pd.read_csv('../data/veteran_percent_est.csv', dtype={'FIPS': object}, index_col=0)

# Merge
merged_data = pd.merge(merged_data, est_vets_percent, on='FIPS')


###########
# Opioids #
###########

if PRINTING:
    print('Merging opioid death rate...')

# Load
opioids = pd.read_csv('../data/opioid_deaths_2018.txt', delimiter='\t', usecols=['County Code', 'Deaths', 'Population', ], dtype={'County Code': object})

# Clean
opioids = opioids[opioids['Population'] != 'Missing']

opioids["Deaths"] = opioids["Deaths"].replace({'Suppressed': 5})  # Replace the suppressed data with 5 (data is suppressed when there are <10 deaths in the county)
opioids['Deaths'] = pd.to_numeric(opioids['Deaths'])
opioids['Population'] = pd.to_numeric(opioids['Population'])

opioids.fillna(0)
opioids['opioid death rate'] = opioids['Deaths'] / (opioids['Population'] / 100000)  # Calculate death rate

# Merge
merged_data = pd.merge(merged_data, opioids, left_on='FIPS', right_on='County Code')


##############
# Write Data #
##############

if PRINTING:
    print('Writing data to merged_data_script.csv...')

# Clean
merged_data = merged_data.drop(columns='% Uninsured')
merged_data = merged_data.drop(columns=['County Code', 'Deaths_y', 'Population_y'])
merged_data = merged_data.rename(columns={'Deaths_x': 'Deaths', 'Population_x': 'Population'})

# Write
merged_data.to_csv('../data/merged_data_script.csv')


###############################
# Compare Script and Notebook #
###############################

print('Checking dataset...')

data_nb = pd.read_csv('../data/merged_data.csv')
data_s = pd.read_csv('../data/merged_data_script.csv')

if data_nb.equals(data_s):
    print('All good!')
elif data_nb.shape != data_s.shape:
    print('Shapes are different.')
elif np.any(data_nb.columns != data_s.columns):
    print('Column names are different.')
