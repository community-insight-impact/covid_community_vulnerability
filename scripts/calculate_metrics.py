import pandas as pd
import numpy as np
import sklearn as skl
from sklearn import preprocessing
import matplotlib.pyplot as plt

PRINTING = 1


#############
# LOAD DATA #
#############

if PRINTING:
    print('Reading data...')

data = pd.read_csv('../data/merged_data.csv', dtype={'FIPS': object})
data = data.drop(data.columns[0], axis=1)


#######################
# CALCULATE QUANTILES #
#######################

if PRINTING:
    print('Calculating quantiles...')

# Make a function to create quantiles of columns
colname = lambda col, suffix: '{}_{}'.format(suffix, col)


def add_quantiles(data, columns, suffix, quantiles=4, labels=None):
    """ For each column name in columns, create a new categorical column with
        the same name as colum, with the suffix specified added, that
        specifies the quantile of the row in the original column using
        pandas.qcut().

        Input
        _____
        data:
            pandas dataframe
            columns:
            list of column names in `data` for which this function is to create
            quantiles
        suffix:
        string suffix for new column names ({`suffix`}_{collumn_name})
        labels:
            list of labels for each quantile (should have length equal to `quantiles`)
        Output
          ______
        pandas dataframe containing original columns, plus new columns with quantile
        information for specified columns.
        """
    d = data.copy()
    quantile_labels = labels or [
        '{:.0f}%'.format(i * 100 / quantiles) for i in range(1, quantiles + 1)
    ]
    for column in columns:
        d[colname(column, suffix)] = d[column].rank(pct=True)
        #pd.qcut(d[column], quantiles, labels=quantile_labels)
    return d


cols = ['Years of Potential Life Lost Rate', '% Fair or Poor Health', 'Average Number of Physically Unhealthy Days',
        'Average Number of Mentally Unhealthy Days', '% Low Birthweight', '% Smokers', 'Food Environment Index',
        '% Physically Inactive', '% With Access to Exercise Opportunities', '% Excessive Drinking',
        '% Driving Deaths with Alcohol Involvement', 'Chlamydia Rate', 'Teen Birth Rate', 'Primary Care Physicians Rate',
        'Dentist Rate', '% With Annual Mammogram', '% Vaccinated', 'High School Graduation Rate', '% Some College',
        '% Unemployed', '% Children in Poverty', 'Income Ratio', '% Single-Parent Households', 'Social Association Rate',
        'Violent Crime Rate', 'Injury Death Rate', 'Average Daily PM2.5', 'Presence of Water Violation',
        '% Severe Housing Problems', '% Drive Alone to Work', '% Long Commute - Drives Alone', 'Life Expectancy',
        'Age-Adjusted Death Rate', 'Child Mortality Rate', 'Infant Mortality Rate', '% Frequent Mental Distress',
        'HIV Prevalence Rate', '% Food Insecure', '% Limited Access to Healthy Foods', 'Drug Overdose Mortality Rate',
        'Motor Vehicle Mortality Rate', '% Insufficient Sleep', '% Children Uninsured', 'Other Primary Care Provider Ratio',
        '% Disconnected Youth', 'Average Reading Performance', 'Average Math Performance', 'Median Household Income',
        '% Enrolled in Free or Reduced Lunch', 'Black/White Segregation Index', 'non-White/White Segregation Index',
        'Homicide Rate', 'Suicide Rate (Age-Adjusted)', 'Firearm Fatalities Rate', 'Juvenile Arrest Rate', '% Homeowners',
        '% Severe Housing Cost Burden', 'Population', '% less than 18 years of age', '% Black',
        '% American Indian & Alaska Native', '% Asian', '% Native Hawaiian/Other Pacific Islander', '% Hispanic',
        '% Non-Hispanic White', '% Not Proficient in English', '% Female', '% Rural', 'countycode', 'internet_consumer',
        'internet_nonconsumer', 'internet_all', 'internet_hhs', 'internet_ratio', 'covid_cases', 'covid_deaths',
        'internet_percent', '%  Adults with Obesity', 'Heart Disease Death Rate', 'Hypertension Death Rate',
        '% Adults 65 and Older', 'COPD Mortality Rate', '% Diagnosed Diabetes', '% Nonwhite', '% households wo car',
        'Number of Hospitals', '% disabled', '% Without Health Insurance', '% Limited English Proficiency',
        '% workers commuting by public transit', '% Veterans in Civilian Adult Population', 'opioid death rate']

data_q = add_quantiles(data, cols, 'q', 10)


################################################################################


#################
# CREATE SCORES #
#################
# All scores are on a scale of 1-100 based on county's percentile ranking
# for a variety of factors. Below, we define several sample scores for
# different use cases. The user could also build their own score
# calculator.

if PRINTING:
    print('Creating scores...')

# Create scores datafame
scores = data[['FIPS', 'State', 'County']].copy()


################
# Severe Cases #
################
# cases, diabetes, % adults 65 and older, obesity, cardiovascular conditions, hypertension, respiratory conditions, smokers
# Describes likelihood that constituents develop severe complications from covid
scores['severe_cases'] = ((data_q['q_covid_cases'] + 4 * data_q['q_% Adults 65 and Older'] +
                           4 * data_q['q_% Diagnosed Diabetes'] + 4 * data_q['q_%  Adults with Obesity']
                           + 4 * data_q['q_Heart Disease Death Rate'] + 4 * data_q['q_Hypertension Death Rate']
                           + 3 * data_q['q_COPD Mortality Rate'] + data_q['q_% Smokers']) / 25) * 100


################################
# Overall Poor Phyiscal Health #
################################
# TBD


######################################
# COVID Vulnerability: Health System #
######################################
# uninsured, provider rates
# TBD


########################
# Health System Access #
########################
# mamomgrams, uninsured, provider rates, vaccinations
# TBD


#################
# Food Services #
#################
# free lunch, food insecure, food environment index, limited access to health foods, enrolled in free lunch
# Describes existing need for food-based community efforts and non-profits
scores['food_services'] = ((data_q['q_Food Environment Index'] + 2 * data_q['q_% Food Insecure'] +
                            data_q['q_% Limited Access to Healthy Foods'] +
                            2 * data_q['q_% Enrolled in Free or Reduced Lunch']) / 6) * 100


###########################
# Disparate economic harm #
###########################
# unemployed, %children in poverty, income ratio, single parents, severe housing problems, disconnected youth, hs grad rate, enrolled in free lunch, severe housing cost burden, covid cases, uninsured
# TBD


###########################
# Community Connectedness #
###########################
# single parents, social association, drive alone to work, disconnected youth, segregation index
# Describes the likelihood that an area could benefit from community connecting services
scores['community'] = ((data_q['q_% Single-Parent Households'] + 3 * (1 - data_q['q_Social Association Rate']) +
                        data_q['q_% Long Commute - Drives Alone'] + data_q['q_% Drive Alone to Work'] +
                        data_q['q_Black/White Segregation Index']) / 7) * 100


######################
# Mental Health Apps #
######################
# frequent mental distress, disconnected youth, average mentally unhealthy days, suicide rate
# describes existing need for additional mental health support
scores['mental_health'] = ((2 * data_q['q_Average Number of Mentally Unhealthy Days'] +
                            data_q['q_% Excessive Drinking'] + 2 * (1 - data_q['q_Social Association Rate']) +
                            2 * data_q['q_% Frequent Mental Distress'] + 2 * data_q['q_Suicide Rate (Age-Adjusted)']) / 9) * 100


#######################
# Mobile Health Needs #
#######################
# rurality, no car, public transit, PCPs, uninsured, non-white, non-english speaking, veterans, 65 and older, disabled, opioid use, fair or poor health, number of hospitals
# Describes the likelihood that a community could benefit from mobile health services
scores['mobile_health'] = ((3 * data_q['q_% Rural'] + 2 * data_q['q_% households wo car'] +
                            2 * data_q['q_% workers commuting by public transit'] + 3 * data_q['q_Primary Care Physicians Rate']
                            + 2 * data_q['q_% Without Health Insurance'] + data_q['q_% Nonwhite']
                            + 2 * data_q['q_% Limited English Proficiency'] +
                            data_q['q_% Veterans in Civilian Adult Population']
                            + 2 * data_q['q_% Adults 65 and Older'] + 2 * data_q['q_% disabled'] + data_q['q_opioid death rate']
                            + data_q['q_% Fair or Poor Health'] + 3 * data_q['q_Number of Hospitals']
                            ) / 25) * 100


##############################
# Overwhelming Health System #
##############################
# low birthweight, smokers, obesity, fair or poor health, excessive drinking, driving deaths with alcohol, PCP rate, violent crime rate, injury death rate, hiv prevalence, drug overdose, motor vehicle mortality, suicide rate
# Describes the likelihood that the existing health infrastructure will be overwhelmed by a covid outbreak
scores['overwhelm'] = ((data_q['q_% Smokers'] + data_q['q_%  Adults with Obesity'] + 2 * data_q['q_% Diagnosed Diabetes']
                        + 2 * data_q['q_% Adults 65 and Older'] + data_q['q_% Low Birthweight']
                        + 2 * data_q['q_% Fair or Poor Health'] + data_q['q_% Excessive Drinking']
                        + 3 * (1 - data_q['q_Primary Care Physicians Rate']) + data_q['q_Violent Crime Rate']
                        + data_q['q_Injury Death Rate'] + data_q['q_HIV Prevalence Rate']
                        + data_q['q_Motor Vehicle Mortality Rate']
                        ) / 18) * 100


######################
# Information Desert #
######################
# not profiient in english, community association, internet ratio
# Desribes the likelihood that constituents have difficulty accessing reliable covid-19 data
scores['info'] = ((data_q['q_% Not Proficient in English'] + (1 - data_q['q_Social Association Rate'])
                   + 2 * data_q['q_internet_ratio']) / 4) * 100


################
# WRITE SCORES #
################

if PRINTING:
    print('Writing scores...')

scores.to_csv('../data/scores_script.csv', index=False)


###############
# TEST SCRIPT #
###############

if PRINTING:
    print('Checking output...')

scores_nb = pd.read_csv('../data/scores.csv')
scores_s = pd.read_csv('../data/scores_script.csv')
if scores_nb.equals(scores_s):
    print('All good!')
